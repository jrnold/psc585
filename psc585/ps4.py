import os
from os import path

import pytave
import scipy as sp
from scipy import io

_MFILES = path.abspath(path.join(path.dirname(__file__), "..", "octave"))
pytave.addpath(_MFILES)

class FinalModel(object):
    """

    Properties
    -----------------

    delta : float
        Discount factor of the government and provinces
    g1oversigma :
        Parameter :math:`\sigma_g`
    k : int
        Number of provinces
    m : int
        Number of states that provinces can take, :math:`2^k`
    n : int
        Number of states, :math:`k 2^k`
    x : ndarray, shape (k, )
        Variable correlated with the wealth generated by each province
    y : ndarray, shape (k, )
        Variable correlated with the cost of war to each province
    wg : float
        Government war cost
    D : ndarray, shape (k, k)
        Matrix of distances between provinces
    S : ndarray, shape (n, k)
        transition matrix

    """
    def __init__(self, **kwargs):
        for k, v in kwargs.iteritems():
            self.__setattr__(k, v)

    _properties = ['delta',
                   'g1oversigma',
                   'k',
                   'm',
                   'n',
                   'x',
                   'y',
                   'wg',
                   'D',
                   'S']

    @classmethod
    def from_mat(cls, filename):
        """ Load model data from .mat file"""
        final_model = io.loadmat("FinalModel.mat", squeeze_me = True)
        model = final_model['model']
        keys = model.dtype.names
        kwargs = {}
        for k in keys:
            kwargs[k] = model[[k]][0]
        for k in ['k', 'm', 'n']:
            kwargs[k] = int(kwargs[k])
        for k in ['delta', 'wg', 'g1oversigma']:
            kwargs[k] = float(kwargs[k])
        kwargs['S'] = kwargs['S'].astype(int)
        return cls(**kwargs)

    def model(self):
        """Return model dict"""
        return dict((k, self.__getattribute__(k)) for k in self._properties)  

    def new_p(self, Pp, Pg, theta):
        """ Calculate transition probabilities

        Pp : ndarray, shape (n, k)
             Conditional choice probabilities for provinces
        Pg : ndarray, shape (n, 2 k)
             Conditional choice probabilities for the government
        theta : ndarray, shape (5, )
             Parameters

        Returns
        ---------
        Pp : ndarray, shape (n, k)
             New conditional choice probabilities for provinces
        Pg : ndarray, shape (n, 2 k)
             New conditional choice probabilities for the government

        Notes
        -----------

        Takes conditional choice probabilities :math:`P` and :math:`\theta`
        as an input and returns new conditional choice values.
        This is the mapping :math:`\Psi` in part (c) of the assignment.

        This is a wrapper for the matlab function **NewP**.
        
        """
        theta = sp.atleast_2d(theta)
        return pytave.feval(2, "NewP", Pp, Pg, theta, self.model())

    def phigprov(self, Pp, Pg, theta):
        """ Calculate transition probabilities

        Parameters
        ------------
        Pp : ndarray, shape (n, k)
             Conditional choice probabilities for provinces
        Pg : ndarray, shape (n, 2 k)
             Conditional choice probabilities for the government
        theta : ndarray, shape (5, )
             Parameters

        Returns
        ---------
        V : ndarray
            Observable state values

        Notes
        -----------

        Takes conditional choice probabilities :math:`P` and :math:`\theta`
        as an input and returns values :math:`V^`.
        This is the mapping :math:`\Phi` in part (b) of the assignment.

        This is a wrapper for the matlab function **Phigprov**.
        
        """
        theta = sp.atleast_2d(theta)
        return pytave.feval(1, "Phigprov", Pp, Pg, theta, self.model())[0]

    def ptilde(self, Pp, Pg):
        """ Calculate transition probabilities

        Parameters
        ------------
        Pp : ndarray, shape (n, k)
             Conditional choice probabilities for provinces
        Pg : ndarray, shape (n, 2 k)
             Conditional choice probabilities for the government
        theta : ndarray, shape (5, )
             Parameters

        Returns
        ---------
        P : ndarray
            Transition probability matrix

        Notes
        -----------

        Takes conditional choice probabilities :math:`P` as an input and
        returns the transition matrix :math:`\tilde{P}`.

        This is a wrapper for the matlab function **Ptilde**.
        
        """
        return pytave.feval(1, "Ptilde", Pp, Pg, self.model())[0]

